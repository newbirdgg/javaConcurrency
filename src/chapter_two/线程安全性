# 第二章 线程安全性

* 要编写线程安全的代码，其核心在于要对状态访问操作进行管理，特别是对**共享的**和**可变的**状态的访问。

* “共享”意味着变量可以由多个线程同时访问，而可变则意味着变量的值在其生命周期内可以发生变化。

* 一个对象是否需要是线程安全的，取决于它是否被多个线程访问。这指的是在程序中访问对象的方式，而不是对象要实现的功能。要使得对象是线程安全的，需要采用同步机制来协同对对象可变状态的访问。如果无法实现协同，那么可能会导致数据破坏以及其他不该出现的结果。

* 当多个线程访问某个状态变量并且其中有一个线程执行写入操作时，必须采用同步机制来协同这些线程对变量的访问。Java中的主要同步机制是关键字**synchronized**，他提供了一种独占的加锁方式，但“同步”这个术语还包括**volatile**类型的变量，显式锁以及原子变量。

  > 如果当多个线程访问同一个可变的状态变量时没有使用合适的同步，那么程序就会出现错误，有三种方式可以修复这个问题：
  >
  > - 不在线程之间共享该状态变量
  > - 将状态变量修改为不可变的变量
  > - 在访问状态变量时使用同步

* 如果从一开始就设计一个线程安全的类，那么比在以后再将这个类修改为线程安全的类要容易的多。

* 程序状态封装的越好买就越容易实现程序的线程安全性，并且代码维护人员也越容易保持这种方式。

  > 设计线程安全的类时，良好的面向对象技术、不可修改性，以及明晰的不变性规范都能起到一定的帮助作用。

* 面向对象中的抽象和封装会降低程序的性能，但在编写并发应用程序时，一种正确的编程方式就是：首先使代码正确运行，然后再提高代码速度。

* “线程安全类”和“线程安全程序”这两个术语，含义基本相同。但是思考一下：**线程安全的程序是否完全由线程安全类构成？答案是否定的。**完全由线程安全类构成的程序并不一定就是线程安全的，而在线程安全类中也可以包含非线程安全的类。

* 在任何情况中，只有当类中仅包含自己的状态时，线程安全类才是有意义的。

## 2.1 什么是线程安全性

* 在线程安全性的定义中，最核心的概念就是正确性。

* 正确性的含义是，某个类的行为与其规范完全一致。在良好的规范中通常会定义各种不变性条件来约束对象状态，以及定义各种后验条件来描述对象操作的结果。

* 我们可以将单线程的正确性近似定义为“所见即所知”。

  > 当多个线程访问某个类时，不管运行环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码中不需要任何额外的同步或者协同，这个类都能表现出正确的行为，那么就称这个类是线程安全的。